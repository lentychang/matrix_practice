# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master, devel ]
  pull_request:
    branches: [ master, devel ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_and_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install Dependencies 
        working-directory: ${{runner.workspace}}
        shell: bash
        run: sudo apt install -y lcov

      # CMake informatiuon and setting up build dir
      - name: Create Build Environment
        run: cmake --version && cmake -E make_directory ${{runner.workspace}}/build

      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system.
      # If no shell is not given, then the runner shell is used, which has no env var.
      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source 
        # and build directories, but this is only available with CMake 3.13 and higher.  
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: 
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
          
      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE

      - name: Test
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.  
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C $BUILD_TYPE

      - name: Test Coverage
        working-directory: ${{runner.workspace}}
        shell: bash
        run: |
          lcov --capture --directory . --output-file coverage.info
          lcov --no-external --remove coverage.info '/usr/*' '*/gtest*' --output-file coverage.info
          lcov --list coverage.info # debug info
          bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
          
  static-check:
    # The type of runner that the job will run on
    env:
      CC: /usr/bin/clang
      CXX: /usr/bin/clang++
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Install Dependencies 
        shell: bash
        run: sudo apt install -y cppcheck clang clang-tidy 
      
      # Cmake Configure
      - name: Create Build Environment
        run: cmake --version && cmake -E make_directory ${{runner.workspace}}/build

      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system.
      # If no shell is not given, then the runner shell is used, which has no env var.
      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source 
        # and build directories, but this is only available with CMake 3.13 and higher.  
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: 
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        
      - name: cppcheck
        shell: bash
        run: |
          cppcheck --profile=build/compile_commands.json -i${{runner.workspace}}/build/_deps

      - name: clang-tidy
        shell: bash
        run: |
          find . -name "*.cpp" | xargs clang-tidy -p build
        
